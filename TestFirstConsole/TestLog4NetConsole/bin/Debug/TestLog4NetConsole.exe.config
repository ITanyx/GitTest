<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler, log4net" />
  </configSections>

  <log4net>
    <root>
      <level value="WARN" />
      <appender-ref ref="LogFileAppender" />
      <appender-ref ref="ConsoleAppender" />
    </root>
    <logger name="testApp.Logging">
      <level value="DEBUG"/>
    </logger>
    
    <!--Appenders 用来定义日志的输出方式，即日志要写到那种介质上去 -->
    <!--AdoNetAppender 将日志记录到数据库中。可以采用SQL和存储过程两种方式。-->
    <!--AspNetTraceAppender  能用asp.net中Trace的方式查看记录的日志。-->
    <!--ConsoleAppender 将日志输出到应用程序控制台。-->
    <!--EventLogAppender 将日志写到Windows Event Log。-->
    <!--FileAppender 将日志输出到文件。-->
    <!--MemoryAppender 将日志存到内存缓冲区。-->
    <!--NetSendAppender 将日志输出到Windows Messenger service.这些日志信息将在用户终端的对话框中显示。-->
    <!--OutputDebugStringAppender 将日志输出到Debuger，如果程序没有Debuger，就输出到系统Debuger。-->
    <!--RemoteSyslogAppender 通过UDP网络协议将日志写到Remote syslog service。-->
    <!--RemotingAppender 通过.NET Remoting将日志写到远程接收端。-->
    <!--RollingFileAppender 将日志以回滚文件的形式写到文件中。-->
    <!--SmtpAppender 将日志写到邮件中。-->
    <!--SmtpPickupDirAppender 将消息以文件的方式放入一个目录中，像IIS SMTP agent这样的SMTP代理就可以阅读或发送它们。-->
    <!--TelnetAppender 客户端通过Telnet来接受日志事件。-->
    <!--TraceAppender 将日志写到.NET trace 系统。-->
    <!--UdpAppender 将日志以无连接UDP数据报的形式送到远程宿主或用UdpClient的形式广播。-->
    <appender name="LogFileAppender" type="log4net.Appender.FileAppender" >
      <param name="File" value="App_Data/log-file.txt" />
      <param name="AppendToFile" value="true" />
      
      <!--输出格式-->
      <!--SimpleLayout简单输出格式，只输出日志级别与消息内容。-->
      <!--RawTimeStampLayout 用来格式化时间，在向数据库输出时会用到。样式如“yyyy-MM-dd HH:mm:ss“-->
      <!--ExceptionLayout需要给Logger的方法传入Exception对象作为参数才起作用，否则就什么也不输出。输出的时候会包含Message和Trace。-->
      <!--PatterLayout使用最多的一个Layout，能输出的信息很多-->
      <layout type="log4net.Layout.PatternLayout">
        <param name="Header" value="[Header] "/>
        <param name="Footer" value="[Footer] "/>
        <param name="ConversionPattern" value="%d [%t] %-5p %c [%x]  - %m%n" />
      </layout>
      
      <!--日志的过滤-->
      <!--DenyAllFilter 阻止所有的日志事件被记录-->
      <!--LevelMatchFilter 只有指定等级的日志事件才被记录-->
      <!--LevelRangeFilter 日志等级在指定范围内的事件才被记录-->
      <!--LoggerMatchFilter 与Logger名称匹配，才记录-->
      <!--PropertyFilter 消息匹配指定的属性值时才被记录-->
      <!--StringMathFilter 消息匹配指定的字符串才被记录-->
      <filter type="log4net.Filter.LevelRangeFilter">
        <param name="LevelMin" value="DEBUG" />
        <param name="LevelMax" value="WARN" />
      </filter>
    </appender>
    <appender name="ConsoleAppender"  type="log4net.Appender.ConsoleAppender" >
      <layout type="log4net.Layout.PatternLayout">
        <param name="ConversionPattern"  value="%d [%t] %-5p %c [%x] - %m%n" />
      </layout>
    </appender>
  </log4net>
</configuration>